{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar styles = StyleSheet.create({\n  container: {\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nexport var KeyboardSpacer = function KeyboardSpacer(_ref) {\n  var style = _ref.style,\n      _ref$onToggle = _ref.onToggle,\n      onToggle = _ref$onToggle === void 0 ? function () {\n    return null;\n  } : _ref$onToggle;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      keyboardSpace = _useState2[0],\n      setKeyboardSpace = _useState2[1];\n\n  useEffect(function () {\n    var updateKeyboardSpace = function updateKeyboardSpace(event) {\n      if (!event.endCoordinates) {\n        return;\n      }\n\n      var screenHeight = Dimensions.get('window').height;\n      var newKeyboardSpace = screenHeight - event.endCoordinates.screenY;\n      setKeyboardSpace(newKeyboardSpace);\n      onToggle(true, newKeyboardSpace);\n    };\n\n    var showEvt = Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';\n    var showListener = Keyboard.addListener(showEvt, updateKeyboardSpace);\n\n    var resetKeyboardSpace = function resetKeyboardSpace() {\n      setKeyboardSpace(0);\n      onToggle(false, 0);\n    };\n\n    var hideEvt = Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';\n    var hideListener = Keyboard.addListener(hideEvt, resetKeyboardSpace);\n    return function () {\n      showListener.remove();\n      hideListener.remove();\n    };\n  }, []);\n  return React.createElement(View, {\n    style: [styles.container, {\n      height: keyboardSpace\n    }, style]\n  });\n};","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/components/KeyboardSpacer.js"],"names":["React","useState","useEffect","styles","StyleSheet","create","container","left","right","bottom","KeyboardSpacer","style","onToggle","keyboardSpace","setKeyboardSpace","updateKeyboardSpace","event","endCoordinates","screenHeight","Dimensions","get","height","newKeyboardSpace","screenY","showEvt","Platform","OS","showListener","Keyboard","addListener","resetKeyboardSpace","hideEvt","hideListener","remove"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;AAGA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,KAAK,EAAE,CAFE;AAGTC,IAAAA,MAAM,EAAE;AAHC;AADoB,CAAlB,CAAf;AAQA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAsC;AAAA,MAAnCC,KAAmC,QAAnCA,KAAmC;AAAA,2BAA5BC,QAA4B;AAAA,MAA5BA,QAA4B,8BAAjB;AAAA,WAAM,IAAN;AAAA,GAAiB;;AAClE,kBAA0CX,QAAQ,CAAC,CAAD,CAAlD;AAAA;AAAA,MAAOY,aAAP;AAAA,MAAsBC,gBAAtB;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD,EAAW;AACrC,UAAI,CAACA,KAAK,CAACC,cAAX,EAA2B;AACzB;AACD;;AAED,UAAMC,YAAY,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA9C;AACA,UAAMC,gBAAgB,GAAGJ,YAAY,GAAGF,KAAK,CAACC,cAAN,CAAqBM,OAA7D;AACAT,MAAAA,gBAAgB,CAACQ,gBAAD,CAAhB;AACAV,MAAAA,QAAQ,CAAC,IAAD,EAAOU,gBAAP,CAAR;AACD,KATD;;AAUA,QAAME,OAAO,GACXC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,iBAA5B,GAAgD,kBADlD;AAEA,QAAMC,YAAY,GAAGC,QAAQ,CAACC,WAAT,CAAqBL,OAArB,EAA8BT,mBAA9B,CAArB;;AAEA,QAAMe,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/BhB,MAAAA,gBAAgB,CAAC,CAAD,CAAhB;AACAF,MAAAA,QAAQ,CAAC,KAAD,EAAQ,CAAR,CAAR;AACD,KAHD;;AAIA,QAAMmB,OAAO,GACXN,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,iBAA5B,GAAgD,kBADlD;AAEA,QAAMM,YAAY,GAAGJ,QAAQ,CAACC,WAAT,CAAqBE,OAArB,EAA8BD,kBAA9B,CAArB;AAEA,WAAO,YAAM;AACXH,MAAAA,YAAY,CAACM,MAAb;AACAD,MAAAA,YAAY,CAACC,MAAb;AACD,KAHD;AAID,GA3BQ,EA2BN,EA3BM,CAAT;AA6BA,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAC9B,MAAM,CAACG,SAAR,EAAmB;AAAEe,MAAAA,MAAM,EAAER;AAAV,KAAnB,EAA8CF,KAA9C;AAAb,IAAP;AACD,CAjCM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Keyboard, View, Dimensions, Platform, StyleSheet } from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport const KeyboardSpacer = ({ style, onToggle = () => null }) => {\n  const [keyboardSpace, setKeyboardSpace] = useState(0);\n\n  useEffect(() => {\n    const updateKeyboardSpace = (event) => {\n      if (!event.endCoordinates) {\n        return;\n      }\n\n      const screenHeight = Dimensions.get('window').height;\n      const newKeyboardSpace = screenHeight - event.endCoordinates.screenY;\n      setKeyboardSpace(newKeyboardSpace);\n      onToggle(true, newKeyboardSpace);\n    };\n    const showEvt =\n      Platform.OS === 'android' ? 'keyboardDidShow' : 'keyboardWillShow';\n    const showListener = Keyboard.addListener(showEvt, updateKeyboardSpace);\n\n    const resetKeyboardSpace = () => {\n      setKeyboardSpace(0);\n      onToggle(false, 0);\n    };\n    const hideEvt =\n      Platform.OS === 'android' ? 'keyboardDidHide' : 'keyboardWillHide';\n    const hideListener = Keyboard.addListener(hideEvt, resetKeyboardSpace);\n\n    return () => {\n      showListener.remove();\n      hideListener.remove();\n    };\n  }, []);\n\n  return <View style={[styles.container, { height: keyboardSpace }, style]} />;\n};"]},"metadata":{},"sourceType":"module"}