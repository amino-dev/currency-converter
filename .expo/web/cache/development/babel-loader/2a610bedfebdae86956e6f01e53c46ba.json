{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useContext } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { format } from 'date-fns';\nimport { Entypo } from '@expo/vector-icons';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport colors from \"../constants/colors\";\nimport { ConversionInput } from \"../components/ConversionInput\";\nimport { Button } from \"../components/Button\";\nimport { KeyboardSpacer } from \"../components/KeyboardSpacer\";\nimport { ConversionContext } from \"../util/ConversionContext\";\nvar screen = Dimensions.get('window');\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.blue\n  },\n  content: {\n    paddingTop: screen.height * 0.1\n  },\n  logoContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 20\n  },\n  logoBackground: {\n    width: screen.width / 0.45,\n    height: screen.width * 0.45\n  },\n  logo: {\n    position: 'absolute',\n    width: screen.width * 0.25,\n    height: screen.width * 0.25\n  },\n  textHeader: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 30,\n    textAlign: 'center',\n    marginBottom: 20\n  },\n  text: {\n    fontSize: 14,\n    color: colors.white,\n    textAlign: 'center'\n  },\n  inputContainer: {\n    marginBottom: 10\n  },\n  header: {\n    alignItems: 'flex-end',\n    marginHorizontal: 20\n  }\n});\nexport default (function (_ref) {\n  var navigation = _ref.navigation;\n\n  var _useContext = useContext(ConversionContext),\n      baseCurrency = _useContext.baseCurrency,\n      quoteCurrency = _useContext.quoteCurrency,\n      swapCurrencies = _useContext.swapCurrencies,\n      date = _useContext.date,\n      rates = _useContext.rates;\n\n  var _useState = useState('100'),\n      _useState2 = _slicedToArray(_useState, 2),\n      value = _useState2[0],\n      setValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scrollEnabled = _useState4[0],\n      setScrollEnabled = _useState4[1];\n\n  var conversionRate = rates[quoteCurrency];\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(StatusBar, {\n    barStyle: \"light-content\",\n    backgroundColor: colors.blue\n  }), React.createElement(ScrollView, {\n    scrollEnabled: scrollEnabled\n  }, React.createElement(SafeAreaView, {\n    style: styles.header\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.push('Options');\n    }\n  }, React.createElement(Entypo, {\n    name: \"cog\",\n    size: 32,\n    color: colors.white\n  }))), React.createElement(View, {\n    style: styles.content\n  }, React.createElement(View, {\n    style: styles.logoContainer\n  }, React.createElement(Image, {\n    source: require(\"../assets/images/background.png\"),\n    style: styles.logoBackground,\n    resizeMode: \"contain\"\n  }), React.createElement(Image, {\n    source: require(\"../assets/images/logo.png\"),\n    style: styles.logo,\n    resizeMode: \"contain\"\n  })), React.createElement(Text, {\n    style: styles.textHeader\n  }, \"Currency Converter\"), React.createElement(View, {\n    style: styles.inputContainer\n  }, React.createElement(ConversionInput, {\n    text: baseCurrency,\n    value: value,\n    onButtonPress: function onButtonPress() {\n      return navigation.push('CurrencyList', {\n        title: 'Base Currency',\n        isBaseCurrency: true\n      });\n    },\n    keyboardType: \"numeric\",\n    onChangeText: function onChangeText(text) {\n      return setValue(text);\n    }\n  }), React.createElement(ConversionInput, {\n    text: quoteCurrency,\n    value: value && \"\" + (parseFloat(value) * conversionRate).toFixed(2),\n    editable: false,\n    onButtonPress: function onButtonPress() {\n      return navigation.push('CurrencyList', {\n        title: 'Quote Currency',\n        isBaseCurrency: false\n      });\n    }\n  })), React.createElement(Text, {\n    style: styles.text\n  }, \"1 \" + baseCurrency + \" = \" + conversionRate + \" \" + quoteCurrency + \" as of \" + (date && format(new Date(date), 'MMM do, yyyy'))), React.createElement(Button, {\n    text: \"Reverse Currencies\",\n    onPress: function onPress() {\n      return swapCurrencies();\n    }\n  }), React.createElement(KeyboardSpacer, {\n    onToggle: function onToggle(visible) {\n      return setScrollEnabled(visible);\n    }\n  }))));\n});","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/screens/Home.js"],"names":["React","useState","useContext","format","Entypo","SafeAreaView","colors","ConversionInput","Button","KeyboardSpacer","ConversionContext","screen","Dimensions","get","styles","StyleSheet","create","container","flex","backgroundColor","blue","content","paddingTop","height","logoContainer","alignItems","justifyContent","marginBottom","logoBackground","width","logo","position","textHeader","color","white","fontWeight","fontSize","textAlign","text","inputContainer","header","marginHorizontal","navigation","baseCurrency","quoteCurrency","swapCurrencies","date","rates","value","setValue","scrollEnabled","setScrollEnabled","conversionRate","push","require","title","isBaseCurrency","parseFloat","toFixed","Date","visible"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport {\n  View,\n  StyleSheet,\n  StatusBar,\n  Dimensions,\n  Image,\n  Text,\n  ScrollView,\n  TouchableOpacity,\n} from 'react-native';\nimport { format } from 'date-fns';\nimport { Entypo } from '@expo/vector-icons';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport colors from '../constants/colors';\nimport { ConversionInput } from '../components/ConversionInput';\nimport { Button } from '../components/Button';\nimport { KeyboardSpacer } from '../components/KeyboardSpacer';\nimport { ConversionContext } from '../util/ConversionContext';\n\nconst screen = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.blue,\n  },\n  content: {\n    paddingTop: screen.height * 0.1,\n  },\n  logoContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 20,\n  },\n  logoBackground: {\n    width: screen.width / 0.45,\n    height: screen.width * 0.45,\n  },\n  logo: {\n    position: 'absolute',\n    width: screen.width * 0.25,\n    height: screen.width * 0.25,\n  },\n  textHeader: {\n    color: colors.white,\n    fontWeight: 'bold',\n    fontSize: 30,\n    textAlign: 'center',\n    marginBottom: 20,\n  },\n  text: {\n    fontSize: 14,\n    color: colors.white,\n    textAlign: 'center',\n  },\n  inputContainer: {\n    marginBottom: 10,\n  },\n  header: {\n    alignItems: 'flex-end',\n    marginHorizontal: 20,\n  },\n});\n\nexport default ({ navigation }) => {\n  const {\n    baseCurrency,\n    quoteCurrency,\n    swapCurrencies,\n    date,\n    rates,\n  } = useContext(ConversionContext);\n  const [value, setValue] = useState('100');\n  const [scrollEnabled, setScrollEnabled] = useState(false);\n\n  const conversionRate = rates[quoteCurrency];\n\n  return (\n    <View style={styles.container}>\n      <StatusBar barStyle=\"light-content\" backgroundColor={colors.blue} />\n      <ScrollView scrollEnabled={scrollEnabled}>\n        <SafeAreaView style={styles.header}>\n          <TouchableOpacity onPress={() => navigation.push('Options')}>\n            <Entypo name=\"cog\" size={32} color={colors.white} />\n          </TouchableOpacity>\n        </SafeAreaView>\n\n        <View style={styles.content}>\n          <View style={styles.logoContainer}>\n            <Image\n              source={require('../assets/images/background.png')}\n              style={styles.logoBackground}\n              resizeMode=\"contain\"\n            />\n            <Image\n              source={require('../assets/images/logo.png')}\n              style={styles.logo}\n              resizeMode=\"contain\"\n            />\n          </View>\n          <Text style={styles.textHeader}>Currency Converter</Text>\n          <View style={styles.inputContainer}>\n            <ConversionInput\n              text={baseCurrency}\n              value={value}\n              onButtonPress={() =>\n                navigation.push('CurrencyList', {\n                  title: 'Base Currency',\n                  isBaseCurrency: true,\n                })\n              }\n              keyboardType=\"numeric\"\n              onChangeText={(text) => setValue(text)}\n            />\n            <ConversionInput\n              text={quoteCurrency}\n              value={\n                value && `${(parseFloat(value) * conversionRate).toFixed(2)}`\n              }\n              editable={false}\n              onButtonPress={() =>\n                navigation.push('CurrencyList', {\n                  title: 'Quote Currency',\n                  isBaseCurrency: false,\n                })\n              }\n            />\n          </View>\n          <Text style={styles.text}>\n            {`1 ${baseCurrency} = ${conversionRate} ${quoteCurrency} as of ${\n              date && format(new Date(date), 'MMM do, yyyy')\n            }`}\n          </Text>\n          <Button text=\"Reverse Currencies\" onPress={() => swapCurrencies()} />\n          <KeyboardSpacer onToggle={(visible) => setScrollEnabled(visible)} />\n        </View>\n      </ScrollView>\n    </View>\n  );\n};"]},"metadata":{},"sourceType":"module"}