{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { api } from \"./api\";\nexport var ConversionContext = createContext();\nexport var ConversionContextProvider = function ConversionContextProvider(_ref) {\n  var children = _ref.children;\n  var DEFAULT_BASE_CURRENCY = \"USD\";\n  var DEFAULT_QUOTE_CURRENCY = \"GBP\";\n\n  var _useState = useState(DEFAULT_BASE_CURRENCY),\n      _useState2 = _slicedToArray(_useState, 2),\n      baseCurrency = _useState2[0],\n      _setBaseCurrency = _useState2[1];\n\n  var _useState3 = useState(DEFAULT_QUOTE_CURRENCY),\n      _useState4 = _slicedToArray(_useState3, 2),\n      quoteCurrency = _useState4[0],\n      setQuoteCurrency = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      date = _useState6[0],\n      setDate = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      rates = _useState8[0],\n      setRates = _useState8[1];\n\n  var setBaseCurrency = function setBaseCurrency(currency) {\n    return api(\"/latest?base=\" + currency).then(function (res) {\n      _setBaseCurrency(currency);\n\n      setDate(res.date);\n      setRates(res.rates);\n    }).catch(function (error) {\n      Alert.alert(\"Sorry, something went wrong.\", error.message);\n    });\n  };\n\n  var swapCurrencies = function swapCurrencies() {\n    setBaseCurrency(quoteCurrency);\n    setQuoteCurrency(baseCurrency);\n  };\n\n  var contextValue = {\n    baseCurrency: baseCurrency,\n    quoteCurrency: quoteCurrency,\n    setBaseCurrency: setBaseCurrency,\n    setQuoteCurrency: setQuoteCurrency,\n    swapCurrencies: swapCurrencies,\n    date: date,\n    rates: rates\n  };\n  useEffect(function () {\n    setBaseCurrency(DEFAULT_BASE_CURRENCY);\n  }, []);\n  return React.createElement(ConversionContext.Provider, {\n    value: contextValue\n  }, children);\n};","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/util/ConversionContext.js"],"names":["React","createContext","useState","useEffect","api","ConversionContext","ConversionContextProvider","children","DEFAULT_BASE_CURRENCY","DEFAULT_QUOTE_CURRENCY","baseCurrency","_setBaseCurrency","quoteCurrency","setQuoteCurrency","date","setDate","rates","setRates","setBaseCurrency","currency","then","res","catch","error","Alert","alert","message","swapCurrencies","contextValue"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;;AAGA,SAASC,GAAT;AAEA,OAAO,IAAMC,iBAAiB,GAAGJ,aAAa,EAAvC;AAEP,OAAO,IAAMK,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACzD,MAAMC,qBAAqB,GAAG,KAA9B;AACA,MAAMC,sBAAsB,GAAG,KAA/B;;AACA,kBAAyCP,QAAQ,CAACM,qBAAD,CAAjD;AAAA;AAAA,MAAOE,YAAP;AAAA,MAAqBC,gBAArB;;AACA,mBAA0CT,QAAQ,CAACO,sBAAD,CAAlD;AAAA;AAAA,MAAOG,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAAwBX,QAAQ,EAAhC;AAAA;AAAA,MAAOY,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0Bb,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOc,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpC,WAAOf,GAAG,mBAAiBe,QAAjB,CAAH,CACJC,IADI,CACC,UAACC,GAAD,EAAS;AACbV,MAAAA,gBAAgB,CAACQ,QAAD,CAAhB;;AACAJ,MAAAA,OAAO,CAACM,GAAG,CAACP,IAAL,CAAP;AACAG,MAAAA,QAAQ,CAACI,GAAG,CAACL,KAAL,CAAR;AACD,KALI,EAMJM,KANI,CAME,UAACC,KAAD,EAAW;AAChBC,MAAAA,KAAK,CAACC,KAAN,CAAY,8BAAZ,EAA4CF,KAAK,CAACG,OAAlD;AACD,KARI,CAAP;AASD,GAVD;;AAYA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BT,IAAAA,eAAe,CAACN,aAAD,CAAf;AACAC,IAAAA,gBAAgB,CAACH,YAAD,CAAhB;AACD,GAHD;;AAKA,MAAMkB,YAAY,GAAG;AACnBlB,IAAAA,YAAY,EAAZA,YADmB;AAEnBE,IAAAA,aAAa,EAAbA,aAFmB;AAGnBM,IAAAA,eAAe,EAAfA,eAHmB;AAInBL,IAAAA,gBAAgB,EAAhBA,gBAJmB;AAKnBc,IAAAA,cAAc,EAAdA,cALmB;AAMnBb,IAAAA,IAAI,EAAJA,IANmB;AAOnBE,IAAAA,KAAK,EAALA;AAPmB,GAArB;AAUAb,EAAAA,SAAS,CAAC,YAAM;AACde,IAAAA,eAAe,CAACV,qBAAD,CAAf;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEoB;AAAnC,KACGrB,QADH,CADF;AAKD,CA3CM","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { Alert } from \"react-native\";\n\nimport { api } from \"./api\";\n\nexport const ConversionContext = createContext();\n\nexport const ConversionContextProvider = ({ children }) => {\n  const DEFAULT_BASE_CURRENCY = \"USD\";\n  const DEFAULT_QUOTE_CURRENCY = \"GBP\";\n  const [baseCurrency, _setBaseCurrency] = useState(DEFAULT_BASE_CURRENCY);\n  const [quoteCurrency, setQuoteCurrency] = useState(DEFAULT_QUOTE_CURRENCY);\n  const [date, setDate] = useState();\n  const [rates, setRates] = useState({});\n\n  const setBaseCurrency = (currency) => {\n    return api(`/latest?base=${currency}`)\n      .then((res) => {\n        _setBaseCurrency(currency);\n        setDate(res.date);\n        setRates(res.rates);\n      })\n      .catch((error) => {\n        Alert.alert(\"Sorry, something went wrong.\", error.message);\n      });\n  };\n\n  const swapCurrencies = () => {\n    setBaseCurrency(quoteCurrency);\n    setQuoteCurrency(baseCurrency);\n  };\n\n  const contextValue = {\n    baseCurrency,\n    quoteCurrency,\n    setBaseCurrency,\n    setQuoteCurrency,\n    swapCurrencies,\n    date,\n    rates,\n  };\n\n  useEffect(() => {\n    setBaseCurrency(DEFAULT_BASE_CURRENCY);\n  }, []);\n  return (\n    <ConversionContext.Provider value={contextValue}>\n      {children}\n    </ConversionContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}