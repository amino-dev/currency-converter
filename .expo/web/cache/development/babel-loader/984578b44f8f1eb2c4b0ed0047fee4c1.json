{"ast":null,"code":"import React, { useContext } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport { Entypo } from '@expo/vector-icons';\nimport currencies from \"../data/currencies.json\";\nimport { RowItem, RowSeparator } from \"../components/RowItem\";\nimport colors from \"../constants/colors\";\nimport { ConversionContext } from \"../util/ConversionContext\";\nvar styles = StyleSheet.create({\n  icon: {\n    width: 30,\n    height: 30,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.blue\n  }\n});\nexport default (function (_ref) {\n  var navigation = _ref.navigation,\n      _ref$route = _ref.route,\n      route = _ref$route === void 0 ? {} : _ref$route;\n  var insets = useSafeAreaFrame();\n\n  var _useContext = useContext(ConversionContext),\n      baseCurrency = _useContext.baseCurrency,\n      quoteCurrency = _useContext.quoteCurrency,\n      setBaseCurrency = _useContext.setBaseCurrency,\n      setQuoteCurrency = _useContext.setQuoteCurrency;\n\n  var params = route.params || {};\n  var isBaseCurrency = params.isBaseCurrency;\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: colors.white\n    }\n  }, React.createElement(StatusBar, {\n    barStyle: \"dark-content\",\n    backgroundColor: colors.white\n  }), React.createElement(FlatList, {\n    data: currencies,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      var selected = false;\n\n      if (isBaseCurrency && item === baseCurrency) {\n        selected = true;\n      } else if (!isBaseCurrency && item === quoteCurrency) {\n        selected = true;\n      }\n\n      return React.createElement(RowItem, {\n        title: item,\n        onPress: function onPress() {\n          if (isBaseCurrency) {\n            setBaseCurrency(item);\n          } else {\n            setQuoteCurrency(item);\n          }\n\n          navigation.pop();\n        },\n        rightIcon: selected && React.createElement(View, {\n          style: styles.icon\n        }, React.createElement(Entypo, {\n          name: \"check\",\n          size: 20,\n          color: colors.white\n        }))\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item;\n    },\n    ItemSeparatorComponent: function ItemSeparatorComponent() {\n      return React.createElement(RowSeparator, null);\n    },\n    ListFooterComponent: function ListFooterComponent() {\n      return React.createElement(View, {\n        style: {\n          paddingBottom: insets.bottom\n        }\n      });\n    }\n  }));\n});","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/screens/CurrencyList.js"],"names":["React","useContext","useSafeAreaFrame","Entypo","currencies","RowItem","RowSeparator","colors","ConversionContext","styles","StyleSheet","create","icon","width","height","borderRadius","alignItems","justifyContent","backgroundColor","blue","navigation","route","insets","baseCurrency","quoteCurrency","setBaseCurrency","setQuoteCurrency","params","isBaseCurrency","flex","white","item","selected","pop","paddingBottom","bottom"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { StatusBar, FlatList, View, StyleSheet } from 'react-native';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport { Entypo } from '@expo/vector-icons';\n\nimport currencies from '../data/currencies.json';\nimport { RowItem, RowSeparator } from '../components/RowItem';\nimport colors from '../constants/colors';\nimport { ConversionContext } from '../util/ConversionContext';\n\nconst styles = StyleSheet.create({\n  icon: {\n    width: 30,\n    height: 30,\n    borderRadius: 20,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: colors.blue,\n  },\n});\n\nexport default ({ navigation, route = {} }) => {\n  const insets = useSafeAreaFrame();\n  const {\n    baseCurrency,\n    quoteCurrency,\n    setBaseCurrency,\n    setQuoteCurrency,\n  } = useContext(ConversionContext);\n\n  const params = route.params || {};\n  const { isBaseCurrency } = params;\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        backgroundColor: colors.white,\n      }}\n    >\n      <StatusBar barStyle=\"dark-content\" backgroundColor={colors.white} />\n      <FlatList\n        data={currencies}\n        renderItem={({ item }) => {\n          let selected = false;\n\n          if (isBaseCurrency && item === baseCurrency) {\n            selected = true;\n          } else if (!isBaseCurrency && item === quoteCurrency) {\n            selected = true;\n          }\n\n          return (\n            <RowItem\n              title={item}\n              onPress={() => {\n                if (isBaseCurrency) {\n                  setBaseCurrency(item);\n                } else {\n                  setQuoteCurrency(item);\n                }\n                navigation.pop();\n              }}\n              rightIcon={\n                selected && (\n                  <View style={styles.icon}>\n                    <Entypo name=\"check\" size={20} color={colors.white} />\n                  </View>\n                )\n              }\n            />\n          );\n        }}\n        keyExtractor={(item) => item}\n        ItemSeparatorComponent={() => <RowSeparator />}\n        ListFooterComponent={() => (\n          <View style={{ paddingBottom: insets.bottom }} />\n        )}\n      />\n    </View>\n  );\n};"]},"metadata":{},"sourceType":"module"}