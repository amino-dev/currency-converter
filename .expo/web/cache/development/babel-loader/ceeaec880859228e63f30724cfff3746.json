{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState } from \"react\";\nexport var ConversionContext = createContext();\nexport var ConversionContextProvider = function ConversionContextProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState(\"USD\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      baseCurrency = _useState2[0],\n      _setBaseCurrency = _useState2[1];\n\n  var _useState3 = useState(\"GBP\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      quoteCurrency = _useState4[0],\n      setQuoteCurrency = _useState4[1];\n\n  var setBaseCurrency = function setBaseCurrency(currency) {\n    _setBaseCurrency(currency);\n  };\n\n  var swapCurrencies = function swapCurrencies() {\n    setBaseCurrency(quoteCurrency);\n    setQuoteCurrency(baseCurrency);\n  };\n\n  var contextValue = {\n    baseCurrency: baseCurrency,\n    setBaseCurrency: setBaseCurrency,\n    quoteCurrency: quoteCurrency,\n    setQuoteCurrency: setQuoteCurrency,\n    swapCurrencies: swapCurrencies\n  };\n  return React.createElement(ConversionContext.Provider, {\n    value: contextValue\n  }, children);\n};","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/util/ConversionContext.js"],"names":["React","createContext","useState","ConversionContext","ConversionContextProvider","children","baseCurrency","_setBaseCurrency","quoteCurrency","setQuoteCurrency","setBaseCurrency","currency","swapCurrencies","contextValue"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,IAAMC,iBAAiB,GAAGF,aAAa,EAAvC;AAGP,OAAO,IAAMG,yBAAyB,GAAG,SAA5BA,yBAA4B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AACvD,kBAAyCH,QAAQ,CAAC,KAAD,CAAjD;AAAA;AAAA,MAAOI,YAAP;AAAA,MAAqBC,gBAArB;;AACA,mBAA0CL,QAAQ,CAAC,KAAD,CAAlD;AAAA;AAAA,MAAOM,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAc;AACpCJ,IAAAA,gBAAgB,CAACI,QAAD,CAAhB;AACD,GAFD;;AAGA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBF,IAAAA,eAAe,CAACF,aAAD,CAAf;AACAC,IAAAA,gBAAgB,CAACH,YAAD,CAAhB;AACD,GAHH;;AAIA,MAAMO,YAAY,GAAG;AACjBP,IAAAA,YAAY,EAAZA,YADiB;AAEjBI,IAAAA,eAAe,EAAfA,eAFiB;AAGjBF,IAAAA,aAAa,EAAbA,aAHiB;AAIjBC,IAAAA,gBAAgB,EAAhBA,gBAJiB;AAKjBG,IAAAA,cAAc,EAAdA;AALiB,GAArB;AAOF,SACI,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEC;AAAnC,KACKR,QADL,CADJ;AAKD,CAtBM","sourcesContent":["import React, { createContext, useState } from \"react\";\n\nexport const ConversionContext = createContext();\n\n// ConversionContext.Provider\nexport const ConversionContextProvider = ({ children }) => {\n    const [baseCurrency, _setBaseCurrency] = useState(\"USD\");\n    const [quoteCurrency, setQuoteCurrency] = useState(\"GBP\");\n    const setBaseCurrency = (currency) => {\n      _setBaseCurrency(currency);\n    }\n    const swapCurrencies = () => {\n        setBaseCurrency(quoteCurrency);\n        setQuoteCurrency(baseCurrency);\n      };\n    const contextValue = {\n        baseCurrency,\n        setBaseCurrency,\n        quoteCurrency,\n        setQuoteCurrency,\n        swapCurrencies,\n    }\n  return (\n      <ConversionContext.Provider value={contextValue}>\n          {children}\n      </ConversionContext.Provider>\n  )\n};\n// ConversionContext.Consumer\n"]},"metadata":{},"sourceType":"module"}