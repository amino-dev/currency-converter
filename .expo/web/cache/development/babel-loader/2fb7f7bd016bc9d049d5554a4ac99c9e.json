{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport format from \"date-fns/format\";\nvar SAMPLE_RATES = {\n  AUD: 1.6164,\n  BGN: 1.9558,\n  BRL: 4.7918,\n  CAD: 1.5338,\n  CHF: 1.1275,\n  CNY: 7.9451,\n  CZK: 25.715,\n  DKK: 7.4567,\n  GBP: 0.89824,\n  HKD: 9.1324,\n  HRK: 7.4341,\n  HUF: 326.49,\n  IDR: 17323.54,\n  ILS: 4.1706,\n  INR: 83.7175,\n  ISK: 127.8,\n  JPY: 129.55,\n  KRW: 1304.76,\n  MXN: 22.3653,\n  MYR: 4.812,\n  NOK: 9.776,\n  NZD: 1.7633,\n  PHP: 62.592,\n  PLN: 4.3183,\n  RON: 4.6385,\n  RUB: 79.5747,\n  SEK: 10.5908,\n  SGD: 1.6,\n  THB: 38.13,\n  TRY: 7.6282,\n  USD: 1.1634,\n  ZAR: 17.8233\n};\nexport var api = function api() {\n  var _path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n  var _path$split = _path.split(\"?\"),\n      _path$split2 = _slicedToArray(_path$split, 1),\n      path = _path$split2[0];\n\n  if (path.length === 0) {\n    return Promise.reject(new Error(\"Path is required.\"));\n  }\n\n  if (path !== \"/latest\") {\n    return Promise.reject(new Error(\"Invalid path.\"));\n  }\n\n  var baseCurrency = _path.split(\"base=\")[1];\n\n  console.log(baseCurrency);\n  return Promise.resolve({\n    base: baseCurrency,\n    date: format(new Date(), 'yyyy-MM-dd')\n  });\n};","map":{"version":3,"sources":["/home/aminoo/Bureau/currency-converter/App/util/api.js"],"names":["format","SAMPLE_RATES","AUD","BGN","BRL","CAD","CHF","CNY","CZK","DKK","GBP","HKD","HRK","HUF","IDR","ILS","INR","ISK","JPY","KRW","MXN","MYR","NOK","NZD","PHP","PLN","RON","RUB","SEK","SGD","THB","TRY","USD","ZAR","api","_path","split","path","length","Promise","reject","Error","baseCurrency","console","log","resolve","base","date","Date"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE,MADc;AAEnBC,EAAAA,GAAG,EAAE,MAFc;AAGnBC,EAAAA,GAAG,EAAE,MAHc;AAInBC,EAAAA,GAAG,EAAE,MAJc;AAKnBC,EAAAA,GAAG,EAAE,MALc;AAMnBC,EAAAA,GAAG,EAAE,MANc;AAOnBC,EAAAA,GAAG,EAAE,MAPc;AAQnBC,EAAAA,GAAG,EAAE,MARc;AASnBC,EAAAA,GAAG,EAAE,OATc;AAUnBC,EAAAA,GAAG,EAAE,MAVc;AAWnBC,EAAAA,GAAG,EAAE,MAXc;AAYnBC,EAAAA,GAAG,EAAE,MAZc;AAanBC,EAAAA,GAAG,EAAE,QAbc;AAcnBC,EAAAA,GAAG,EAAE,MAdc;AAenBC,EAAAA,GAAG,EAAE,OAfc;AAgBnBC,EAAAA,GAAG,EAAE,KAhBc;AAiBnBC,EAAAA,GAAG,EAAE,MAjBc;AAkBnBC,EAAAA,GAAG,EAAE,OAlBc;AAmBnBC,EAAAA,GAAG,EAAE,OAnBc;AAoBnBC,EAAAA,GAAG,EAAE,KApBc;AAqBnBC,EAAAA,GAAG,EAAE,KArBc;AAsBnBC,EAAAA,GAAG,EAAE,MAtBc;AAuBnBC,EAAAA,GAAG,EAAE,MAvBc;AAwBnBC,EAAAA,GAAG,EAAE,MAxBc;AAyBnBC,EAAAA,GAAG,EAAE,MAzBc;AA0BnBC,EAAAA,GAAG,EAAE,OA1Bc;AA2BnBC,EAAAA,GAAG,EAAE,OA3Bc;AA4BnBC,EAAAA,GAAG,EAAE,GA5Bc;AA6BnBC,EAAAA,GAAG,EAAE,KA7Bc;AA8BnBC,EAAAA,GAAG,EAAE,MA9Bc;AA+BnBC,EAAAA,GAAG,EAAE,MA/Bc;AAgCnBC,EAAAA,GAAG,EAAE;AAhCc,CAArB;AAmCA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;;AACjC,oBAAeA,KAAK,CAACC,KAAN,CAAY,GAAZ,CAAf;AAAA;AAAA,MAAOC,IAAP;;AACA,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,mBAAV,CAAf,CAAP;AACD;;AACD,MAAIJ,IAAI,KAAK,SAAb,EAAwB;AACtB,WAAOE,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,eAAV,CAAf,CAAP;AACD;;AAED,MAAMC,YAAY,GAAGP,KAAK,CAACC,KAAN,CAAY,OAAZ,EAAqB,CAArB,CAArB;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,SAAOH,OAAO,CAACM,OAAR,CAAgB;AACnBC,IAAAA,IAAI,EAAGJ,YADY;AAEnBK,IAAAA,IAAI,EAAG/C,MAAM,CAAE,IAAIgD,IAAJ,EAAF,EAAc,YAAd;AAFM,GAAhB,CAAP;AAID,CAfM","sourcesContent":["import format from \"date-fns/format\";\n// We have a set of sample rates\nconst SAMPLE_RATES = {\n  AUD: 1.6164,\n  BGN: 1.9558,\n  BRL: 4.7918,\n  CAD: 1.5338,\n  CHF: 1.1275,\n  CNY: 7.9451,\n  CZK: 25.715,\n  DKK: 7.4567,\n  GBP: 0.89824,\n  HKD: 9.1324,\n  HRK: 7.4341,\n  HUF: 326.49,\n  IDR: 17323.54,\n  ILS: 4.1706,\n  INR: 83.7175,\n  ISK: 127.8,\n  JPY: 129.55,\n  KRW: 1304.76,\n  MXN: 22.3653,\n  MYR: 4.812,\n  NOK: 9.776,\n  NZD: 1.7633,\n  PHP: 62.592,\n  PLN: 4.3183,\n  RON: 4.6385,\n  RUB: 79.5747,\n  SEK: 10.5908,\n  SGD: 1.6,\n  THB: 38.13,\n  TRY: 7.6282,\n  USD: 1.1634,\n  ZAR: 17.8233,\n};\n\nexport const api = (_path = \"\") => {\n  const [path] = _path.split(\"?\");\n  if (path.length === 0) {\n    return Promise.reject(new Error(\"Path is required.\"));\n  }\n  if (path !== \"/latest\") {\n    return Promise.reject(new Error(\"Invalid path.\"));\n  }\n\n  const baseCurrency = _path.split(\"base=\")[1];\n  console.log(baseCurrency);\n  return Promise.resolve({ \n      base : baseCurrency,\n      date : format (new Date(), 'yyyy-MM-dd'),\n   });\n};\n"]},"metadata":{},"sourceType":"module"}